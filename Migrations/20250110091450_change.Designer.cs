// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelTo.Data;

#nullable disable

namespace TravelTo.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20250110091450_change")]
    partial class change
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelTo.Models.Company", b =>
                {
                    b.Property<int>("Company_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Company_Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("owner")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Company_Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Company_Id = 1,
                            Name = "TBCKVADRO",
                            description = "saswauli kompania romelic arasdros iarsebs",
                            img_name = "tbc_image.png",
                            owner = "gela"
                        },
                        new
                        {
                            Company_Id = 2,
                            Name = "liberti",
                            description = "raxdeba sh",
                            img_name = "liberti_img.png",
                            owner = "NEKA"
                        },
                        new
                        {
                            Company_Id = 3,
                            Name = "bog",
                            description = "imedia",
                            img_name = "bog_image.png",
                            owner = "NAK"
                        },
                        new
                        {
                            Company_Id = 4,
                            Name = "kripto",
                            description = "iarsebs",
                            img_name = "credit_bank.png",
                            owner = "bark"
                        });
                });

            modelBuilder.Entity("TravelTo.Models.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Messege")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Telephoni")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("gmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactiUndat");
                });

            modelBuilder.Entity("TravelTo.Models.SastumroCapitacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrentCapacity")
                        .HasColumnType("int");

                    b.Property<int?>("MaxCapitacity")
                        .HasColumnType("int");

                    b.Property<int?>("Sastumro_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Sastumro_Id")
                        .IsUnique()
                        .HasFilter("[Sastumro_Id] IS NOT NULL");

                    b.ToTable("SastumroCapitacity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentCapacity = 0,
                            MaxCapitacity = 50,
                            Sastumro_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            CurrentCapacity = 0,
                            MaxCapitacity = 100,
                            Sastumro_Id = 2
                        },
                        new
                        {
                            Id = 3,
                            CurrentCapacity = 0,
                            MaxCapitacity = 200,
                            Sastumro_Id = 3
                        },
                        new
                        {
                            Id = 4,
                            CurrentCapacity = 0,
                            MaxCapitacity = 300,
                            Sastumro_Id = 4
                        },
                        new
                        {
                            Id = 5,
                            CurrentCapacity = 0,
                            MaxCapitacity = 50,
                            Sastumro_Id = 5
                        },
                        new
                        {
                            Id = 6,
                            CurrentCapacity = 0,
                            MaxCapitacity = 200,
                            Sastumro_Id = 6
                        },
                        new
                        {
                            Id = 7,
                            CurrentCapacity = 0,
                            MaxCapitacity = 300,
                            Sastumro_Id = 7
                        },
                        new
                        {
                            Id = 8,
                            CurrentCapacity = 0,
                            MaxCapitacity = 300,
                            Sastumro_Id = 8
                        },
                        new
                        {
                            Id = 9,
                            CurrentCapacity = 0,
                            MaxCapitacity = 100,
                            Sastumro_Id = 9
                        },
                        new
                        {
                            Id = 10,
                            CurrentCapacity = 0,
                            MaxCapitacity = 2,
                            Sastumro_Id = 10
                        });
                });

            modelBuilder.Entity("TravelTo.Models.SastumroDajavshna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("text")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("Id");

                    b.ToTable("sastumroDajavshna");
                });

            modelBuilder.Entity("TravelTo.Models.Sastumroebi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fasi")
                        .HasColumnType("int");

                    b.Property<string>("Lokacia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nomer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tviseba_Id")
                        .HasColumnType("int");

                    b.Property<string>("gmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Tviseba_Id")
                        .IsUnique();

                    b.ToTable("Sastumroebis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "es sastumro mdebareobs dedamiwis mwervalze romelzedac iyo guini",
                            Fasi = 100,
                            Lokacia = "RobotiqsiHotel",
                            Name = "Robotiqsi Grand Hotel",
                            Tviseba_Id = 1,
                            gmail = "gmail@gmail.com",
                            image_name = "1.jpeg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Es sastumro mdebareobs msoflios yvelaze civ wertislhi wesit esaaa",
                            Fasi = 50,
                            Lokacia = "AntarqtidaHotel",
                            Name = "Antarqtida Luxury Suites",
                            Tviseba_Id = 2,
                            gmail = "antarqtida@gmail.com",
                            image_name = "2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Tbilisi tbilisi tbilisi uni uni uni btu ilia japan tsu.",
                            Fasi = 75,
                            Lokacia = "TbilisiHotel",
                            Name = "Tbilisi City Hotel",
                            Tviseba_Id = 3,
                            gmail = "tbilisi@gmail.com",
                            image_name = "3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Kutaisi kutaisi kutaisi ratqmaunda kutasisi rogorc yoveltvbis kutaisi.",
                            Fasi = 60,
                            Lokacia = "KutaisiHotel",
                            Name = "Kutaisi Boutique Hotel",
                            Tviseba_Id = 4,
                            gmail = "kutaisi@gmail.com",
                            image_name = "4.webp"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Batumi bautmi bautmi zfgva zgva zgva meti meti meti.",
                            Fasi = 80,
                            Lokacia = "BatumiHotel",
                            Name = "Batumi Beach Resort",
                            Tviseba_Id = 5,
                            gmail = "batumi@gmail.com",
                            image_name = "5.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Mtskheta es xom mcxetaa mcxetaa azrze ar var ra davwero amaze.",
                            Fasi = 40,
                            Lokacia = "MtskhetaHotel",
                            Name = "Mtskheta Heritage Inn",
                            Tviseba_Id = 6,
                            gmail = "mtskheta@gmail.com",
                            image_name = "6.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Zugdidi es xom zugdidia yvelaze didi farti romelic daixarja",
                            Fasi = 30,
                            Lokacia = "ZugdidiHotel",
                            Name = "Zugdidi Park Hotel",
                            Tviseba_Id = 7,
                            gmail = "zugdidi@gmail.com",
                            image_name = "7.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Gori gori gori amis meti ra unda vtqva es xom goria gorta shoris.",
                            Fasi = 45,
                            Lokacia = "GoriHotel",
                            Name = "Gori Fortress Hotel",
                            Tviseba_Id = 8,
                            gmail = "gori@gmail.com",
                            image_name = "8.jpg"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Telavi telavi telavi azrze ar var ra davwero amashi mara telaviaMountains.",
                            Fasi = 55,
                            Lokacia = "TelaviHotel",
                            Name = "Telavi Wine Hotel",
                            Tviseba_Id = 9,
                            gmail = "telavi@gmail.com",
                            image_name = "9.jpg"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Signagi signagi signagi es xom signagia azrze ar var ra davwero amazec amitomac signagi signagia.",
                            Fasi = 65,
                            Lokacia = "SignagiHotel",
                            Name = "Signagi Hilltop Hotel",
                            Tviseba_Id = 10,
                            gmail = "signagi@gmail.com",
                            image_name = "10.jpg"
                        });
                });

            modelBuilder.Entity("TravelTo.Models.SastumroebiDaTurebi", b =>
                {
                    b.Property<int>("Sastumro_Id")
                        .HasColumnType("int");

                    b.Property<int>("Turebi_Id")
                        .HasColumnType("int");

                    b.HasKey("Sastumro_Id", "Turebi_Id");

                    b.HasIndex("Turebi_Id");

                    b.ToTable("Sastumrodaturebi");

                    b.HasData(
                        new
                        {
                            Sastumro_Id = 2,
                            Turebi_Id = 1
                        },
                        new
                        {
                            Sastumro_Id = 3,
                            Turebi_Id = 2
                        },
                        new
                        {
                            Sastumro_Id = 4,
                            Turebi_Id = 3
                        },
                        new
                        {
                            Sastumro_Id = 1,
                            Turebi_Id = 8
                        },
                        new
                        {
                            Sastumro_Id = 10,
                            Turebi_Id = 4
                        },
                        new
                        {
                            Sastumro_Id = 9,
                            Turebi_Id = 7
                        },
                        new
                        {
                            Sastumro_Id = 8,
                            Turebi_Id = 6
                        },
                        new
                        {
                            Sastumro_Id = 5,
                            Turebi_Id = 5
                        });
                });

            modelBuilder.Entity("TravelTo.Models.SastumtroAndDajavshna", b =>
                {
                    b.Property<int>("Sastumro_Id")
                        .HasColumnType("int");

                    b.Property<int>("SastumroDajavshna_Id")
                        .HasColumnType("int");

                    b.HasKey("Sastumro_Id", "SastumroDajavshna_Id");

                    b.HasIndex("SastumroDajavshna_Id");

                    b.ToTable("SastumtroAndDajavshna");
                });

            modelBuilder.Entity("TravelTo.Models.Turebi", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Company_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("image_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Company_Id");

                    b.ToTable("Turebis");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Company_Id = 1,
                            Description = "ანტარქტიდა — დედამიწის ყველაზე მაღალი კონტინენტია, რომლის ზედაპირის საშუალო სიმაღლე ზღვის დონიდან შეადგენს 2000 მეტრზე მეტს, ხოლო კონტინენტის ცენტრში აღწევს 4000 მეტრს.",
                            Name = "ანტარქტიდა",
                            Price = 999.99000000000001,
                            image_name = "antarqtida.jpg"
                        },
                        new
                        {
                            id = 2,
                            Company_Id = 3,
                            Description = "თბილისი კავკასიის რეგიონის მნიშვნელოვანი ინდუსტრიული, სოციალური და კულტურული ცენტრია და ბოლო დროს ერთ-ერთი უმნიშვნელოვანესი სატრანსპორტო კვანძი ხდება გლობალური ენერგომატარებლებისა და სავაჭრო პროექტებისთვის (იხ. ბაქო-თბილისი-ჯეიჰანის ნავთობსადენი და ბაქო-თბილისი-ერზერუმის გაზსადენი). ქალაქი ისტორიული აბრეშუმის დიდი გზის ერთ-ერთ მარშრუტზე მდებარეობს და მნიშვნელოვანი სავაჭრო/სატრანზიტო ცენტრის პოზიცია უჭირავს რუსეთის ჩრდილო კავკასიას, თურქეთსა და ტრანსკავკასიის სომხეთისა და აზერბაიჯანის რესპუბლიკების გადაკვეთაზე სტრატეგიული მდებარეობით.",
                            Name = "თბილისი",
                            Price = 500.99000000000001,
                            image_name = "Tbilisi.jpg"
                        },
                        new
                        {
                            id = 3,
                            Company_Id = 2,
                            Description = "ქუთაისი — ქალაქი და მუნიციპალიტეტი საქართველოში, იმერეთის მხარის ადმინისტრაციული ცენტრი, სიდიდით მეოთხე ქალაქი საქართველოში, საქართველოს სამეფოს ისტორიული დედაქალაქი, ქუთაისის საეპისკოპოსოს ისტორიული ცენტრი. მდებარეობს მდინარე რიონზე. მოსახლეობა 130 400 ადამიანი (2023). ",
                            Name = "ქუთაისი",
                            Price = 799.99000000000001,
                            image_name = "7012519385_f7e92b8d8e_z.jpg"
                        },
                        new
                        {
                            id = 4,
                            Company_Id = 4,
                            Description = "პარიზი (ფრანგ. Paris [paˈʁi] პაღი) — საფრანგეთის დედაქალაქი და ქვეყნის უდიდესი ქალაქია, ასევე ადმინისტრაციული ცენტრი ილ-დე-ფრანსის რეგიონის, რომელიც მოიცავს პარიზსა და მის შემოგარენს. პარიზი ევროპის წამყვანი კულტურული, ბიზნეს და პოლიტიკური ცენტრია, დამახასიათებელი ნეოკლასიკური არქიტექტურითა და მისი გავლენით მოდასა და ხელოვნებაზე. მეტსახელად „სინათლის ქალაქი“ (la Ville Lumière), პარიზი XIX საუკუნიდან მოყოლებული ყველაზე რომანტიკული ქალაქის რეპუტაციით სარგებლობს. ",
                            Name = "პარიზი",
                            Price = 1999.99,
                            image_name = "Los-AngelesCa.jfif"
                        },
                        new
                        {
                            id = 5,
                            Company_Id = 1,
                            Description = "ბათუმი — ქალაქი და მუნიციპალიტეტი[5] საქართველოში, არის აჭარის ავტონომიური რესპუბლიკის ადმინისტრაციული ცენტრი. ბათუმი არის მოსახლეობის რაოდენობით მეორე ქალაქი საქართველოში, მსხვილი საერთაშორისო ნავსადგური შავი ზღვის სამხრეთ-აღმოსავლეთ სანაპიროზე, მნიშვნელოვანი სამრეწველო, კულტურული და ტურისტული ცენტრი საქართველოში. ",
                            Name = "ბათუმი",
                            Price = 999.99000000000001,
                            image_name = "Batumi.jpg"
                        },
                        new
                        {
                            id = 6,
                            Company_Id = 2,
                            Description = "მაიამი (ინგლ. Miami) — ქალაქი აშშ-ში, ფლორიდის შტატში. მდებარეობს შტატის სამხრეთ-აღმოსავლეთ ნაწილში, ატლანტის ოკეანის სანაპიროზე. 2013 წლის მონაცემებით მოსახლეობა 417,650 კაცი. ფორბსი მაიამი მოწინავე ქალაქია ფინანსების, კომერციის, კულტურის, მედიის, ხელოვნებისა და საერთაშორისო ვაჭრობის სექტორებში. მაიამის პორტი ცნობილია როგორც „მსოფლიოს კრუიზული დედაქალაქი“.[1] მაიამის პორტს ჰყავს მსოფლიოში ყველაზე მეტი კრუიზული ხაზი და მგზავრები.[2] 2010 წელს მაიამი შეფასდა როგორც მეშვიდე ყველაზე მნიშვნელოვანი ქალაქი აშშ-ში და 33-ე მსოფლიოში. 2008 წელს მაიამი ფორბსის მიერ შეფასდა როგორც „ამერიკის უსუფთავესი ქალაქი“. 2009 წელს ცნობილმა შვეიცარიულმა ბანკმა იუ-ბი-ესმა შეისწავლა მსოფლიოს 73 უმდიდრესი ქალაქი და მაიამი შეაფასა როგორც ყველაზე მდიდარი ქალაქი აშშ-ში, ხოლო მეთხუთმეტე უმდიდრესი ქალაქი მსოფლიოში.[3] ",
                            Name = "მაიამი",
                            Price = 1999.99,
                            image_name = "Brazil.jfif"
                        },
                        new
                        {
                            id = 7,
                            Company_Id = 4,
                            Description = "გორი — ქალაქი საქართველოში, შიდა ქართლის მხარეში, გორის მუნიციპალიტეტისა და შიდა ქართლის მხარის ადმინისტრაციული ცენტრი. მდებარეობს მდინარეების მტკვრისა და ლიახვის შესართავთან, ძირითად სატრანსპორტო გზების გზასაყარზე, თბილისიდან 76-ე კილომეტრში (რკინიგზით).",
                            Name = "გორი",
                            Price = 500.99000000000001,
                            image_name = "Denmark.jfif"
                        },
                        new
                        {
                            id = 8,
                            Company_Id = 3,
                            Description = "მთელავი — ქალაქი საქართველოში, კახეთის მხარისა და თელავის მუნიციპალიტეტის ადმინისტრაციული ცენტრი. მოსახლეობა 19 629 (2014 წ.) ადამიანი. ",
                            Name = "თელავი",
                            Price = 999.99000000000001,
                            image_name = "Spain.jfif"
                        });
                });

            modelBuilder.Entity("TravelTo.Models.TvisebebiSastumroebis", b =>
                {
                    b.Property<int>("Tviseba_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tviseba_Id"));

                    b.Property<string>("Shinauri_cxovelebis_dashveba")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ufaso_avtosadgomi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wifi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bagi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bari")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("daxuruli_auzi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kino_darbasi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("otaxi_aramweveltaTvis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resotrani")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sabavsho_otaxi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sabiliardo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sakonferencio_darbazi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("samrecxao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sauna")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spa_centri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sportdarbazi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("terasa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tviseba_Id");

                    b.ToTable("TvisebebiDaSastumroebi");

                    b.HasData(
                        new
                        {
                            Tviseba_Id = 1,
                            Shinauri_cxovelebis_dashveba = "YES",
                            Ufaso_avtosadgomi = "NO",
                            Wifi = "YES",
                            bagi = "YES",
                            bari = "YES",
                            daxuruli_auzi = "NO",
                            kino_darbasi = "NO",
                            otaxi_aramweveltaTvis = "NO",
                            resotrani = "NO",
                            sabavsho_otaxi = "YES",
                            sabiliardo = "NO",
                            sakonferencio_darbazi = "NO",
                            samrecxao = "YES",
                            sauna = "YES",
                            spa_centri = "NO",
                            sportdarbazi = "YES",
                            terasa = "NO"
                        },
                        new
                        {
                            Tviseba_Id = 2,
                            Shinauri_cxovelebis_dashveba = "NO",
                            Ufaso_avtosadgomi = "YES",
                            Wifi = "NO",
                            bagi = "NO",
                            bari = "NO",
                            daxuruli_auzi = "YES",
                            kino_darbasi = "YES",
                            otaxi_aramweveltaTvis = "YES",
                            resotrani = "YES",
                            sabavsho_otaxi = "NO",
                            sabiliardo = "YES",
                            sakonferencio_darbazi = "YES",
                            samrecxao = "NO",
                            sauna = "NO",
                            spa_centri = "YES",
                            sportdarbazi = "NO",
                            terasa = "YES"
                        },
                        new
                        {
                            Tviseba_Id = 3,
                            Shinauri_cxovelebis_dashveba = "YES",
                            Ufaso_avtosadgomi = "NO",
                            Wifi = "YES",
                            bagi = "YES",
                            bari = "YES",
                            daxuruli_auzi = "NO",
                            kino_darbasi = "YES",
                            otaxi_aramweveltaTvis = "NO",
                            resotrani = "NO",
                            sabavsho_otaxi = "YES",
                            sabiliardo = "NO",
                            sakonferencio_darbazi = "NO",
                            samrecxao = "YES",
                            sauna = "YES",
                            spa_centri = "NO",
                            sportdarbazi = "YES",
                            terasa = "NO"
                        },
                        new
                        {
                            Tviseba_Id = 4,
                            Shinauri_cxovelebis_dashveba = "NO",
                            Ufaso_avtosadgomi = "YES",
                            Wifi = "YES",
                            bagi = "NO",
                            bari = "NO",
                            daxuruli_auzi = "NO",
                            kino_darbasi = "NO",
                            otaxi_aramweveltaTvis = "NO",
                            resotrani = "YES",
                            sabavsho_otaxi = "YES",
                            sabiliardo = "YES",
                            sakonferencio_darbazi = "YES",
                            samrecxao = "YES",
                            sauna = "YES",
                            spa_centri = "YES",
                            sportdarbazi = "NO",
                            terasa = "YES"
                        },
                        new
                        {
                            Tviseba_Id = 5,
                            Shinauri_cxovelebis_dashveba = "YES",
                            Ufaso_avtosadgomi = "NO",
                            Wifi = "NO",
                            bagi = "YES",
                            bari = "YES",
                            daxuruli_auzi = "YES",
                            kino_darbasi = "YES",
                            otaxi_aramweveltaTvis = "YES",
                            resotrani = "NO",
                            sabavsho_otaxi = "YES",
                            sabiliardo = "YES",
                            sakonferencio_darbazi = "NO",
                            samrecxao = "NO",
                            sauna = "NO",
                            spa_centri = "NO",
                            sportdarbazi = "YES",
                            terasa = "YES"
                        },
                        new
                        {
                            Tviseba_Id = 6,
                            Shinauri_cxovelebis_dashveba = "YES",
                            Ufaso_avtosadgomi = "YES",
                            Wifi = "YES",
                            bagi = "NO",
                            bari = "YES",
                            daxuruli_auzi = "NO",
                            kino_darbasi = "YES",
                            otaxi_aramweveltaTvis = "NO",
                            resotrani = "YES",
                            sabavsho_otaxi = "NO",
                            sabiliardo = "NO",
                            sakonferencio_darbazi = "NO",
                            samrecxao = "YES",
                            sauna = "YES",
                            spa_centri = "NO",
                            sportdarbazi = "YES",
                            terasa = "NO"
                        },
                        new
                        {
                            Tviseba_Id = 7,
                            Shinauri_cxovelebis_dashveba = "NO",
                            Ufaso_avtosadgomi = "NO",
                            Wifi = "NO",
                            bagi = "YES",
                            bari = "NO",
                            daxuruli_auzi = "NO",
                            kino_darbasi = "NO",
                            otaxi_aramweveltaTvis = "YES",
                            resotrani = "YES",
                            sabavsho_otaxi = "YES",
                            sabiliardo = "YES",
                            sakonferencio_darbazi = "YES",
                            samrecxao = "YES",
                            sauna = "NO",
                            spa_centri = "YES",
                            sportdarbazi = "NO",
                            terasa = "YES"
                        },
                        new
                        {
                            Tviseba_Id = 8,
                            Shinauri_cxovelebis_dashveba = "NO",
                            Ufaso_avtosadgomi = "YES",
                            Wifi = "YES",
                            bagi = "NO",
                            bari = "YES",
                            daxuruli_auzi = "NO",
                            kino_darbasi = "YES",
                            otaxi_aramweveltaTvis = "NO",
                            resotrani = "NO",
                            sabavsho_otaxi = "YES",
                            sabiliardo = "YES",
                            sakonferencio_darbazi = "NO",
                            samrecxao = "YES",
                            sauna = "YES",
                            spa_centri = "YES",
                            sportdarbazi = "NO",
                            terasa = "NO"
                        },
                        new
                        {
                            Tviseba_Id = 9,
                            Shinauri_cxovelebis_dashveba = "YES",
                            Ufaso_avtosadgomi = "NO",
                            Wifi = "NO",
                            bagi = "YES",
                            bari = "NO",
                            daxuruli_auzi = "YES",
                            kino_darbasi = "YES",
                            otaxi_aramweveltaTvis = "YES",
                            resotrani = "YES",
                            sabavsho_otaxi = "NO",
                            sabiliardo = "NO",
                            sakonferencio_darbazi = "YES",
                            samrecxao = "YES",
                            sauna = "NO",
                            spa_centri = "NO",
                            sportdarbazi = "YES",
                            terasa = "YES"
                        },
                        new
                        {
                            Tviseba_Id = 10,
                            Shinauri_cxovelebis_dashveba = "NO",
                            Ufaso_avtosadgomi = "YES",
                            Wifi = "YES",
                            bagi = "NO",
                            bari = "YES",
                            daxuruli_auzi = "YES",
                            kino_darbasi = "YES",
                            otaxi_aramweveltaTvis = "NO",
                            resotrani = "NO",
                            sabavsho_otaxi = "YES",
                            sabiliardo = "YES",
                            sakonferencio_darbazi = "NO",
                            samrecxao = "YES",
                            sauna = "NO",
                            spa_centri = "YES",
                            sportdarbazi = "NO",
                            terasa = "NO"
                        });
                });

            modelBuilder.Entity("TravelTo.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TravelTo.Models.UserAndSastumroebi", b =>
                {
                    b.Property<int?>("Sastumorebi_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Sastumorebi_Id", "User_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("userAndSastumroebis");
                });

            modelBuilder.Entity("TravelTo.Models.UserAndTurebiMap", b =>
                {
                    b.Property<int?>("Turebi_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Turebi_Id", "User_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("UserAndTurebi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TravelTo.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TravelTo.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelTo.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TravelTo.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelTo.Models.SastumroCapitacity", b =>
                {
                    b.HasOne("TravelTo.Models.Sastumroebi", "Sastumroebi")
                        .WithOne("sastumroCapitacity")
                        .HasForeignKey("TravelTo.Models.SastumroCapitacity", "Sastumro_Id");

                    b.Navigation("Sastumroebi");
                });

            modelBuilder.Entity("TravelTo.Models.Sastumroebi", b =>
                {
                    b.HasOne("TravelTo.Models.TvisebebiSastumroebis", "tvisebebiSastumroebis")
                        .WithOne("Sastumro")
                        .HasForeignKey("TravelTo.Models.Sastumroebi", "Tviseba_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tvisebebiSastumroebis");
                });

            modelBuilder.Entity("TravelTo.Models.SastumroebiDaTurebi", b =>
                {
                    b.HasOne("TravelTo.Models.Sastumroebi", "Sastumroebi")
                        .WithMany("turebi")
                        .HasForeignKey("Sastumro_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelTo.Models.Turebi", "Turebi")
                        .WithMany("Sastumroebi")
                        .HasForeignKey("Turebi_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sastumroebi");

                    b.Navigation("Turebi");
                });

            modelBuilder.Entity("TravelTo.Models.SastumtroAndDajavshna", b =>
                {
                    b.HasOne("TravelTo.Models.SastumroDajavshna", "sastumroDajavshna")
                        .WithMany("SastumroAndDajavshna")
                        .HasForeignKey("SastumroDajavshna_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelTo.Models.Sastumroebi", "Sastumroebi")
                        .WithMany("SastumroAndDajavshna")
                        .HasForeignKey("Sastumro_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sastumroebi");

                    b.Navigation("sastumroDajavshna");
                });

            modelBuilder.Entity("TravelTo.Models.Turebi", b =>
                {
                    b.HasOne("TravelTo.Models.Company", "Company")
                        .WithMany("Turebi")
                        .HasForeignKey("Company_Id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TravelTo.Models.UserAndSastumroebi", b =>
                {
                    b.HasOne("TravelTo.Models.Sastumroebi", "sastumroebi")
                        .WithMany("user_sastumroebi")
                        .HasForeignKey("Sastumorebi_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelTo.Models.User", "users")
                        .WithMany("user_sastumroebi")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sastumroebi");

                    b.Navigation("users");
                });

            modelBuilder.Entity("TravelTo.Models.UserAndTurebiMap", b =>
                {
                    b.HasOne("TravelTo.Models.Turebi", "turebi")
                        .WithMany("UserAndTurebiMapT")
                        .HasForeignKey("Turebi_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelTo.Models.User", "User")
                        .WithMany("UserAndTurebiMapU")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("turebi");
                });

            modelBuilder.Entity("TravelTo.Models.Company", b =>
                {
                    b.Navigation("Turebi");
                });

            modelBuilder.Entity("TravelTo.Models.SastumroDajavshna", b =>
                {
                    b.Navigation("SastumroAndDajavshna");
                });

            modelBuilder.Entity("TravelTo.Models.Sastumroebi", b =>
                {
                    b.Navigation("SastumroAndDajavshna");

                    b.Navigation("sastumroCapitacity");

                    b.Navigation("turebi");

                    b.Navigation("user_sastumroebi");
                });

            modelBuilder.Entity("TravelTo.Models.Turebi", b =>
                {
                    b.Navigation("Sastumroebi");

                    b.Navigation("UserAndTurebiMapT");
                });

            modelBuilder.Entity("TravelTo.Models.TvisebebiSastumroebis", b =>
                {
                    b.Navigation("Sastumro")
                        .IsRequired();
                });

            modelBuilder.Entity("TravelTo.Models.User", b =>
                {
                    b.Navigation("UserAndTurebiMapU");

                    b.Navigation("user_sastumroebi");
                });
#pragma warning restore 612, 618
        }
    }
}
